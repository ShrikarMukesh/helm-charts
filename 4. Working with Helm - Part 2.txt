========================
4) Working with Helm -  Part 2
========================
1) Create First Chart
================
mkdir Demos
cd Demos

Demos> helm create myjlc-chart

Chart with the name - myjlc-chart will be created with the following files and folders.

/myjlc-chart
/myjlc-chart/Chart.yaml
/myjlc-chart/values.yaml
/myjlc-chart/charts
/myjlc-chart/templates

/myjlc-chart/templates/deployment.yaml
/myjlc-chart/templates/service.yaml
/myjlc-chart/templates/serviceaccount.yaml
/myjlc-chart/templates/ingress.yaml
/myjlc-chart/templates/hpa.yaml

/myjlc-chart/templates/_helpers.tpl
/myjlc-chart/templates/Notes.txt

This is Nginx Chart => To deploy Nginx Server on Kubernetes.


2) Install the App using Your Chart
===========================
helm list

helm install myjlc-app myjlc-chart  // Use this

helm install myjlc-app srinivas/myjlc-chart // ( When chart at Repo)

helm list

NOTES:

kubectl get pods

 ECHO $(kubectl get pods  -l "app.kubernetes.io/name=myjlc-chart,app.kubernetes.io/instance=myjlc-app" -o jsonpath="{.items[0].metadata.name}")

myjlc-app-myjlc-chart-5fbc75744f-tv6jj

kubectl port-forward myjlc-app-myjlc-chart-5fbc75744f-tv6jj  12345:80

In my case = > kubectl port-forward myjlc-app-myjlc-chart-5fbc75744f-tv6jj  12345:80


http://localhost:12345/

=========================================================================================================================================================================
In My Case It is How It's Working

NAME: myjlc-app
LAST DEPLOYED: Sat Dec  3 17:49:43 2022
NAMESPACE: default
STATUS: deployed
REVISION: 1
NOTES:
1. Get the application URL by running these commands:
  export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=myjlc-chart,app.kubernetes.io/instance=myjlc-app" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace default $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace default port-forward $POD_NAME 8080:$CONTAINER_PORT
  
  
3) Upgrade the App using Your Chart
===============================================================================================================================================================================
helm list

helm upgrade myjlc-app myjlc-chart --set replicaCount=3

helm list

helm upgrade myjlc-app myjlc-chart --set replicaCount=5

helm list

4) Helm Lint
==============
=> Verify the Chart for possible issues
=> This takes a path of a chart and Checks whether the chart is well-formed or not.
=> If the linter encounters things that will cause the chart to fail installation, it will emit [ERROR] messages. 
=> If it encounters issues that break with convention or recommendation, it will emit [WARNING] messages.

Ex:
helm lint myjlc-chart 


5) Helm Package
==============
=> It packages the chart directory into a versioned chart archive file
=> Versioned chart archives are used by Helm package repositories.

Ex:
helm package myjlc-chart 

=> By Default, It places the  chart archive file in the Current Directory.
=> If you want to place the chart archive file in the required Directory then use   -d or --destination 

Ex:
helm package myjlc-chart --destination d:/myfinal-charts
helm package myjlc-chart -d d:/myfinal-charts

=> By Default , Dependent Charts will not be downloaded.
=> If you want to download the Dependent Charts then use  -u or --dependency-update     
=> -u option will  update dependencies from "Chart.yaml" to dir "charts/" before packaging

helm package myjlc-chart --dependency-update 
helm package myjlc-chart -u

6) Exploring Chart.yaml
===================
apiVersion: v2
name: myjlc-chart
description: A Helm chart for Kubernetes
type: application
version: 0.1.0
appVersion: "1.16.0"

=> You can also add the Optional elements to Chart.yaml

apiVersion: v2
name: myjlc-chart
description: A Helm chart for Kubernetes
icon: http://www.dandesacademy.com/jlcapp.jpg
keywords:
   - BookStore App
   - Kubernetes with Help
maintainers:
   - name: Srinivas
     email: sri@dandesacademy.com
type: application
version: 1.2.5
appVersion: "9.6.3"


7) Exploring values.yaml
===================
=>  Default values for myjlc-chart.
=> This is a YAML-formatted file.
=>  Declare variables to be passed into your templates.

values.yaml
---------------
replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

service:
  type: ClusterIP
  port: 80


8) Exploring  .helpers.tpl
===================
=> Contains the methods written in Go Text Template Engine
=> These methods can be used in YAML Configuration files in template folder.

Ex:
{{- define "myjlc-chart.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
{{- end }}


9) Exploring templates folder
=======================
=> Templates folder contains kubernetes YAML Configuration files for the Resources like Deployments, Services , ServiceAccounts, ConfigMaps, Secrets etc etc.

/myjlc-chart/templates/deployment.yaml
/myjlc-chart/templates/service.yaml
/myjlc-chart/templates/serviceaccount.yaml
/myjlc-chart/templates/ingress.yaml
/myjlc-chart/templates/hpa.yaml

=> These YAML Configuration files will be used to generate the Kubernetes Manifest.

=> Generated Manifest will be sent to Kubernetes Cluster

service.yaml
----------------
apiVersion: v1
kind: Service
metadata:
  name: {{ include "myjlc-chart.fullname" . }}
  labels:
    {{- include "myjlc-chart.labels" . | nindent 4 }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "myjlc-chart.selectorLabels" . | nindent 4 }}

serviceaccount.yaml
---------------------------
{{- if .Values.serviceAccount.create -}}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "myjlc-chart.serviceAccountName" . }}
  labels:
    {{- include "myjlc-chart.labels" . | nindent 4 }}
  {{- with .Values.serviceAccount.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}



